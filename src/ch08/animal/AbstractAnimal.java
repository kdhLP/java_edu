package ch08.animal;

// 추상클래스
// 추상적인 개념(사랑, 우정, 동물, 탈것,...)은 객체 생성이 되면 안됨
// 더이상 객체 생성이 되지 않음
// 순수 추상 클래스 : 추상메소드로만 이루어진 추상클래스
// - 인스턴스를 만들 수 없다. (객체를 생성할 수 없음)
// - 상속시, 모든 메소드를 만드시 오버라이딩 해야함
// - 주로 다형성을 위해서 사용 (역할-추상적인 개념)

/*
 * 추상클래스를 사용하는 이유
 * 	 1. 제약사항
 * 		- 클래스 내 추상메소드를 반드시 구현해라는 제약
 * 	   ex) usb A-type / C-type
 * 		UI(User Interface) : 사람과 사물 사이에서 의사소통 할 수 있도록 상호작용을 위해 만들어진 매개체
 * 		* abstract 클래스/메소드 -> interface 자주 사용
 * 	 2. 다중구현(상속) : 일반적인 클래스의 다중상속은 안되지만, 추상클래스의 메소드는 내용은 없고, 
 * 					형태(이름)만 조재하기 때문에 다중상속을 허용함
 * 
 * 		* 좋은 프로그램(프로그래밍) -> 제약이 많은 프로그램
 * 
 */
public abstract class AbstractAnimal {
	// 동물의 울음소리
	String sound = "";
	// 동물의 울음소리를 출력하는 메소드(기능)
	/* 
	 * 추상메소드
	 * 	 - 자식 클래스가 반드시 상속받아서 오버라이딩을 해야합니다.
	 * 	 - 자식클래스에서 상속을 받은 부모클래스의 추상메소드가 존재하는데 
	 * 		오버라이딩 하지 않으면 컴파일 에러 발생(알림)
	 * 	 - 추상메소드가 하나라도 있는 클래스는 추상클래스(abstract) 선언
	 *  	: 작동하지 않는 메소드를 가진 불완전한 클래스 판단 -> 반드시 클래스도 추상클래스로 선언
	 * 	 - 추상 메서드는 메서드 바디(내용)이 없음
	 * 	 
	 */
	public abstract void sound();
	public abstract void move();
	public abstract void eat(String food);
	
	
}
